(()=>{"use strict";var e=function(e,t,n){var r=t.querySelector(".form__button");return r.textContent=e?"Saving...":n,r.textContent},t=function(e,t){return fetch(e,t).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.statusText))}))},n={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_inactive",inputErrorClass:"form__input-error_active",errorClass:"form__input_error"},r="Saving ...",o="Save",i=document.querySelector(".form__input_type_name"),a=document.querySelector(".form__input_type_job"),c=document.querySelector(".profile__edit-button"),u=document.querySelector(".profile__add-button"),l=document.querySelector(".profile__update-image"),s=document.querySelector(".popup_type_edit-profile"),f=document.querySelector(".popup_type_add-card"),p=document.querySelector(".popup_type_update-image-profile"),d=s.querySelector(n.formSelector),_=p.querySelector(n.formSelector),y=f.querySelector(n.formSelector);function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}s.querySelector(".popup__close-button"),f.querySelector(".popup__close-button"),p.querySelector(".popup__close-button"),s.querySelector(".form__input_type_name"),s.querySelector(".form__input_type_job"),p.querySelector(".form__input_type_avatar"),f.querySelector(".form__input_type_card-title"),f.querySelector(".form__input_type_card-link"),document.querySelector(".profile__name"),document.querySelector(".profile__job");function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=function e(t,n,r,o,i,a){var c=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),m(this,"_getCardTemplate",(function(){return c._cardTemplate.cloneNode(!0)})),m(this,"_imagePropertySetup",(function(e){e.src=c._link,e.alt=c._name})),m(this,"_deleteCard",(function(e){c._userId!==c._ownerId&&(e.style.display="none"),e.addEventListener("click",(function(){c._handleCardDelete(c._id)}))})),m(this,"_createLike",(function(e){c._cardElement.querySelector(".card__likes-count").textContent=c._likes.length,c.isLiked()&&c.likeCard(c._likes),e.addEventListener("click",(function(e){c._handleLikeIcon(c._id)}))})),m(this,"_createFigurePopup",(function(e){e.addEventListener("click",c._handleCardClick)})),m(this,"_setEventListeners",(function(e,t,n){var r=e.querySelector(".card__like");c._deleteCard(n),c._createLike(r),c._createFigurePopup(t)})),m(this,"removeCard",(function(){c._cardElement.querySelector(".card__delete").closest(".card").remove()})),m(this,"isLiked",(function(){return c._likes.some((function(e){return e._id===c._userId}))})),m(this,"likeCard",(function(e){c._likes=e,c._cardElement.querySelector(".card__likes-count").textContent=c._likes.length,c._cardElement.querySelector(".card__like").classList.toggle("card__like_active")})),m(this,"generateCard",(function(){c._cardElement=c._getCardTemplate();var e=c._cardElement.querySelector(".card__image"),t=c._cardElement.querySelector(".card__delete");c._setEventListeners(c._cardElement,e,t);var n=c._cardElement.querySelector(".card__title");return c._imagePropertySetup(e),n.textContent=c._name,c._cardElement})),this._name=t.name,this._link=t.link,this._id=t._id,this._ownerId=t.owner._id,this._likes=t.likes,this._cardSelector=n,this._cardTemplate=document.querySelector(this._cardSelector).content.querySelector(".card"),this._userId=r,this._handleCardClick=o,this._handleCardDelete=i,this._handleLikeIcon=a};function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var E=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),g(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),g(this,"_handleClickClose",(function(e){console.log("123"),e.target===e.currentTarget&&(console.log("456"),n.close())})),g(this,"_handleButtonClose",(function(){console.log("icon"),n.close()})),this._popupElement=document.querySelector(t),this.setEventListeners=this.setEventListeners.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){this._popupElement.querySelector(".popup__close-button").addEventListener("click",this._handleButtonClose),this._popupElement.addEventListener("click",this._handleClickClose)}}])&&v(t.prototype,n),e}();function S(e){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S(e)}function w(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t,n){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=L(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},k(e,t,n||e)}function O(e,t){return O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},O(e,t)}function j(e,t){if(t&&("object"===S(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function L(e){return L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},L(e)}var q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=L(r);if(o){var n=L(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return j(this,e)});function a(){return w(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"open",value:function(e,t){var n=this._popupElement.querySelector(".popup__image"),r=this._popupElement.querySelector(".popup__caption");n.src=e,n.alt=t,r.ariaLabel=t,r.textContent=t,k(L(a.prototype),"open",this).call(this)}}])&&C(t.prototype,n),a}(E);function P(e){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P(e)}function I(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(e,t,n){return R="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=B(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},R(e,t,n||e)}function U(e,t){return U=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},U(e,t)}function A(e,t){if(t&&("object"===P(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return x(e)}function x(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function B(e){return B=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},B(e)}var D=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&U(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=B(r);if(o){var n=B(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function a(e,t){var n,r,o,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),c=function(){var e,t=function(e){if(Array.isArray(e))return I(e)}(e=n._formElement.querySelectorAll(".form__input"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return I(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?I(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),r={};return t.forEach((function(e){r[e.name]=e.value})),r},(o="_getInputValues")in(r=x(n=i.call(this,e)))?Object.defineProperty(r,o,{value:c,enumerable:!0,configurable:!0,writable:!0}):r[o]=c,n._submitHandler=t,n._formElement=n._popupElement.querySelector(".form"),n}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;R(B(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault,e._submitHandler(e._getInputValues()),console.log(e._submitHandler)}))}},{key:"close",value:function(){R(B(a.prototype),"close",this).call(this),this._formElement.reset()}}])&&T(t.prototype,n),a}(E);function V(e){return V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},V(e)}function H(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function F(e,t,n){return F="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=z(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},F(e,t,n||e)}function J(e,t){return J=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},J(e,t)}function M(e,t){if(t&&("object"===V(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return $(e)}function $(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function z(e){return z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},z(e)}function G(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var K=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&J(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=z(r);if(o){var n=z(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return M(this,e)});function a(){var e;H(this,a);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return G($(e=i.call.apply(i,[this].concat(n))),"setAction",(function(t){e._submitHandler=t})),e}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;F(z(a.prototype),"setEventListeners",this).call(this),this._popupElement.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler()}))}}])&&N(t.prototype,n),a}(E);function Q(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var W=function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Q(this,"_showError",(function(e){var t=r._settings,n=t.inputErrorClass,o=t.errorClass,i=e.validationMessage,a=r._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(o),a.textContent=i,a.classList.add(n)})),Q(this,"_hideError",(function(e){var t=r._settings,n=t.inputErrorClass,o=t.errorClass,i=r._formElement.querySelector("#".concat(e.id,"-error"));i.classList.remove(n),i.textContent="",e.classList.remove(o)})),Q(this,"_checkValidity",(function(e){e.validity.valid?r._hideError(e):r._showError(e)})),Q(this,"_hasInvalidInput",(function(){return r._inputList.some((function(e){return!e.validity.valid}))})),Q(this,"_toggleButtonState",(function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=r._settings.inactiveButtonClass;r._hasInvalidInput()||e?(r._buttonElement.classList.add(t),r._buttonElement.disabled="disabled"):(r._buttonElement.classList.remove(t),r._buttonElement.disabled=!1)})),Q(this,"_setEventListeners",(function(){r._toggleButtonState(),r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._checkValidity(e),r._toggleButtonState()}))}))})),Q(this,"enableValidation",(function(){r._formElement.addEventListener("submit",(function(e){return e.preventDefault()})),r._setEventListeners()})),Q(this,"resettingFormValidation",(function(){r._buttonElement&&r._toggleButtonState(!0),r._inputList.forEach((function(e){r._hideError(e)}))})),this._settings=n,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)};function X(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Z,ee=new function e(n){var r=this,o=n.baseUrl,i=n.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Y(this,"getUserInfo",(function(){return t("".concat(r._baseUrl,"/users/me"),{headers:r._headers})})),Y(this,"getInitialCards",(function(){return t("".concat(r._baseUrl,"/cards"),{headers:r._headers})})),Y(this,"addCard",(function(e){return t("".concat(r._baseUrl,"/cards"),{headers:r._headers,method:"POST",body:JSON.stringify({name:e["card-title"],link:e["card-link"]})})})),Y(this,"deleteCard",(function(e){return console.log("api",e),t("".concat(r._baseUrl,"/cards/").concat(e),{headers:r._headers,method:"DELETE"})})),Y(this,"likeCard",(function(e){return t("".concat(r._baseUrl,"/cards/likes/").concat(e),{headers:r._headers,method:"PUT"})})),Y(this,"dislikeCard",(function(e){return t("".concat(r._baseUrl,"/cards/likes/").concat(e),{headers:r._headers,method:"DELETE"})})),Y(this,"editProfileUserInfo",(function(e){var n=e.name,o=e.job;return t("".concat(r._baseUrl,"/users/me"),{headers:r._headers,method:"PATCH",body:JSON.stringify({name:n,about:o})})})),Y(this,"updateUserImage",(function(e){return t("".concat(r._baseUrl,"/users/me/avatar"),{headers:r._headers,method:"PATCH",body:JSON.stringify(e)})})),this._baseUrl=o,this._headers=i}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"9bc9c0f1-5a8a-40aa-b985-20e7b24d1389","Content-Type":"application/json"}});function te(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ne=new function e(t,n,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),X(this,"getUserInfo",(function(){return{name:o._userName.textContent,job:o._userJob.textContent,avatar:o._userImage.src}})),X(this,"setUserInfo",(function(e){var t=e.name,n=e.job,r=e.avatar;o._userName.textContent=t,o._userJob.textContent=n,o._userImage.src=r,o._userImage.alt=t})),this._userName=document.querySelector(t),this._userJob=document.querySelector(n),this._userImage=document.querySelector(r)}(".profile__name",".profile__job",".profile__image");function re(e){var t=new b(e,"#card-template",Z,(function(){le.open(e.link,e.name)}),(function(){se.open(),se.setAction((function(){ee.deleteCard(e._id).then((function(e){t.removeCard(),se.close()})).catch(console.error)}))}),(function(){t.isLiked()?ee.dislikeCard(e._id).then((function(e){t.likeCard(e.likes)})).catch(console.error):ee.likeCard(e._id).then((function(e){t.likeCard(e.likes)})).catch(console.error)}));return t}var oe,ie=oe=new function e(t,n){var r=this,o=t.items,i=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),h(this,"renderer",(function(e){e.forEach((function(e){return r._renderer(e)}))})),h(this,"addItem",(function(e){r._container.append(e)})),h(this,"prependItem",(function(e){r._container.prepend(e)})),this._items=o,this._renderer=i,this._container=document.querySelector(n)}({renderer:function(e){var t=re(e);oe.addItem(t.generateCard())}},".cards__list");Promise.all([ee.getUserInfo(),ee.getInitialCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return te(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?te(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];Z=o._id,ne.setUserInfo({name:o.name,job:o.about,avatar:o.avatar}),ie.renderer(i)})).catch(console.error);var ae=new W(d),ce=new W(y),ue=new W(_);ae.enableValidation(),ce.enableValidation(),ue.enableValidation();var le=new q(".popup_type_image"),se=new K(".popup_type_delete-card"),fe=new D(".popup_type_edit-profile",(function(t){e(!0,s,r),ee.editProfileUserInfo(t).then((function(e){ne.setUserInfo({name:e.name,job:e.about,avatar:e.avatar}),fe.close()})).catch(console.error).finally((function(){return e(!1,s,o)}))})),pe=new D(".popup_type_update-image-profile",(function(t){e(!0,p,r),ee.updateUserImage(t).then((function(e){ne.setUserInfo({name:e.name,job:e.about,avatar:e.avatar}),pe.close()})).catch(console.error).finally((function(){return e(!1,p,o)}))})),de=new D(".popup_type_add-card",(function(t){e(!0,f,r),ee.addCard(t).then((function(e){var n=re({name:t["card-title"],link:t["card-link"],_id:e._id,owner:e.owner,likes:e.likes});ie.prependItem(n.generateCard()),de.close()})).catch(console.error).finally((function(){return e(!1,f,"Create")}))}));le.setEventListeners(),se.setEventListeners(),fe.setEventListeners(),de.setEventListeners(),pe.setEventListeners(),c.addEventListener("click",(function(){ae.resettingFormValidation();var e=ne.getUserInfo(),t=e.name,n=e.job;i.value=t,a.value=n,fe.open()})),u.addEventListener("click",(function(){ce.resettingFormValidation(),de.open()})),l.addEventListener("click",(function(){ue.resettingFormValidation(),ne.getUserInfo().avatar,pe.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,